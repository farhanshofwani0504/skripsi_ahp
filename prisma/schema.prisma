generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Karyawan {
  id          Int       @id @default(autoincrement())
  nama        String
  posisi      String
  email       String?   @unique
  startDate   DateTime  @default(now())   // ‚Üê NEW
  skor        Float     @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  penilaian   Penilaian[]
  warningLogs WarningLog[]
}


model Penilaian {
  id         Int      @id @default(autoincrement())
  karyawanId Int
  kriteriaId Int
  nilai      Float

  createdAt  DateTime @default(now())   // ‚¨ÖÔ∏è baru
  karyawan   Karyawan @relation(fields: [karyawanId], references: [id], onDelete: Cascade)
  kriteria   Kriteria @relation(fields: [kriteriaId], references: [id], onDelete: Cascade)

  @@unique([karyawanId, kriteriaId, createdAt]) // 1¬†input per hari per kriteria (opsional)
}


model Kriteria {
  id            Int             @id @default(autoincrement())
  nama          String          @unique
  penilaian     Penilaian[]
  bobotKriteria BobotKriteria?
}

model BobotKriteria {
  id         Int      @id @default(autoincrement())
  kriteriaId Int      @unique
  bobot      Float
  cr         Float?   //  üëà   NEW ‚îÄ‚îÄ nullable biar nggak rusak data lama

  kriteria   Kriteria @relation(fields: [kriteriaId], references: [id], onDelete: Cascade)
}


model WarningLog {
  id          Int       @id @default(autoincrement())
  karyawanId  Int
  email       String
  skor        Float
  tanggal     DateTime   @default(now())

  karyawan    Karyawan   @relation(fields: [karyawanId], references: [id], onDelete: Cascade)
}

model User {
  id                   Int       @id @default(autoincrement())
  username             String    @unique
  email                String    @unique
  password             String
  role                 String?
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
}
